HTML
:::::::::::::::::::::::::::::::::::::::::::::::::
<!DOCTYPE html>
<html lang="es">
    <head>
        <title>Emisoras IUD</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link href="css/style.css" rel="stylesheet">
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" />
        <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css" rel="stylesheet"/>
    </head>
    <body>
         <ul class="nav justify-content-center">
            <li class="nav-item">
              <a class="nav-link active" aria-current="page" href="#">Inicio</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="#">Acerca de</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="#">Ayuda</a>
            </li>
          </ul>
          <div class="container">
            <h1>Emisoras IUD Stereo</h1>
            <div class="row row-cols-1 row-cols-sm-2 row-cols-md-4">
              <div class="col">
                <audio autoplay id="reproductor">
                    <source src="">
                    Tu navegador no es compatible
                </audio>
                <i id="signal" class="fa-solid fa-signal fa-lg"></i>
                <select onchange="changeSelectEmisoras(this)" id="select-emisoras" class="form-select" aria-label="Emisoras">
                </select>
              </div>
              <div class="col">
                <button onclick="play()" id="play" type="button" class="btn btn-outline-success">
                    <i class="fa-solid fa-circle-play fa-lg"></i>
                </button>
                <button onclick="pause()" id="pause" type="button" class="btn btn-outline-danger">
                    <i class="fa-solid fa-circle-pause fa-lg"></i>
                </button>
              </div>
              <div class="col">
                <input onchange="changeVolume(this)" type="range" class="form-range" id="volume" min="0" max="100"/>
              </div>
              <div class="col">
                <img src="img/muchacha_bonita.jpg" class="img-fluid" alt="">
              </div>
            </div>
          </div>
        <script src="js/script.js"></script>
    </body>
</html>














:::::::::::::::::::::::::::::::::::::::::::::::;;




CSS
::::::::::::::::::::::::::::::::::::::::::::::::::::
.nav{
    background: #67b5dd;
}


.nav a{
    color: #fff;
}


.col{
    padding: 10px;
}


#reproductor{
    display: none;
}


#signal{
    color: red;
}




::::::::::::::::::::::::::::::::::::::::::::::::::::::


JS
:::::::::::::::::::::::::::::::::::::::::::::::::::::::
const emisoras = [
    {
        id: 0,
        nombre: 'Selecciona una emisora',
        url: '',
        param: 'selected'
    },
    {
        id: 1,
        nombre: 'Radio Tiempo',
        url: 'https://i70.letio.com/9144.aac',
        param: ''
    },
    {
        id: 2,
        nombre: 'Olimpica Stereo',
        url: 'https://i70.letio.com/9122.aac',
        param: ''
    },
    {
        id: 3,
        nombre: 'La X',
        url: 'http://stream.eleden.com:8230/lax.aac',
        param: ''
    }
];


const reproducir = document.getElementById('reproductor');
const signalIcon = document.getElementById('signal');
const selectEmisoras = document.getElementById('select-emisoras');
const btnPlay = document.getElementById('play');
const btnPause = document.getElementById('pause');
const ctrlVolume = document.getElementById('volume');


let playing;
let currentVolume;


function init(){
    currentVolume = 20;
    btnPlay.disabled = true;
    btnPause.disabled = true;
    ctrlVolume.disabled = true;
    playing = false;
    ctrlVolume.value = currentVolume;
    reproducir.volume = currentVolume/100;
    llenarSelectEmisoras();
    changeSignal();
}


function llenarSelectEmisoras(){
    let info = '';
    for(const element of emisoras){
        info += `<option ${element.param} value="${element.id}">${element.nombre}</option>`;
    }
    selectEmisoras.innerHTML = info;
}


function changeSignal(){
    const color = playing ? 'green' : 'red';
    




signalIcon.style.color = color;
}




function changeSelectEmisoras(evt){
    if(evt.value == 0){
        btnPlay.disabled = true;
        btnPause.disabled = true;
        ctrlVolume.disabled = true;
        playing = false;
    }else{
        btnPlay.disabled = false;
        btnPause.disabled = false;
        ctrlVolume.disabled = false;
        playing = true;
    }
    reproducir.src = emisoras[evt.value].url;
    changeSignal();
    reproducir.volume = currentVolume/100;
}
function play(){
    playing = true;
    reproducir.play();
    reproducir.volume = currentVolume/100;
    changeSignal();
}


function pause(){
    playing = false;
    reproducir.pause();
    changeSignal();
}


function changeVolume(evt){
    currentVolume = evt.value;
    reproducir.volume = currentVolume/100;
    changeSignal();
}






(function(){
    init();
})();::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


<img src="img/muchacha_bonita.jpg" class="img-fluid" alt="">
https://iudigital.edu.co/Noticias/PublishingImages/BOLET%C3%8DN.jpg+


UID PAGE
enlace favicon: https://iudigital.edu.co/Style%20Library/images/favicon.ico


HTML
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inicio</title>
    <link href="css/style.css" rel="stylesheet"/>
    <link href="img/favicon.ico" rel="shortcut icon" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css" rel="stylesheet"/>
</head>
<body>
    <main class="container">
       <!-- header -->
       <header class="header">
           <div class="nav1">
                <i class="fa-brands fa-facebook-square"></i>
                <i class="fa-brands fa-linkedin"></i>
                <i class="fa-brands fa-twitter-square"></i>
           </div>
       </header>
       <!-- nav bar-->
       <nav class="nav">
            <div class="menu">
                <!-- logo -->
                <div class="logo">
                    <a href="#"><img src="img/logo-escudo.png"/></a>
                </div>
                <!-- menú de navegación -->
                <div class="nav2">
                    <!-- listado items del menú-->
                    <ul class="nav-items">
                        <li>
                            <a href="#">Oferta educativa</a>
                        </li>
                        <li>
                            <a href="#">Unidades académicas</a>
                        </li>
                        <li>
                            <a href="#">Bienestar institucional</a>
                        </li>
                        <li>
                            <a href="#">Vicerrectoría de extensión</a>
                        </li>
                        <li>
                            <a href="#">Nuestra institución</a>
                        </li>
                    </ul>
                </div>
                <!-- submenú botón -->
                <div class="submenu">
                    <button class="button">Campus IUD</button>
                </div>
            </div>
       </nav>
       <!-- slider -->
       <div class="slider">
       </div>
       <!-- noticias -->
       <section class="section">
           <!-- articulo -->
           <div class="articles">
               <!-- artículo -->
               <article class="article">
                    <!-- imagen aluciva -->
                    <div class="img">
                        <img src="img/BOLETÍN.jpg" alt=""/>
                    </div>
                    <!-- fecha y botón -->
                    <div>
                        <span>Junio 05, 2022</span><a href="#">Institucional</a>
                    </div>
                    <!-- Párrafo del artículo -->
                    <p>
                        Conoce los detalles de la primera feria internacional del emprendimiento
                    </p>
               </article>
               <!-- artículo -->
               <article class="article">
                    <!-- imagen aluciva -->
                    <div class="img">
                        <img src="img/CP_NOTICIA.png" alt=""/>
                    </div>
                    <!-- fecha y botón -->
                    <div>
                        <span>Junio 05, 2022</span><a href="#">Institucional</a>
                    </div>
                    <!-- Párrafo del artículo -->
                    <p>
                        Conoce los detalles de la primera feria internacional del emprendimiento
                    </p>
                </article>
                <article class="article">
                    <!-- imagen aluciva -->
                    <div class="img">
                        <img src="img/TRANSMISION_SIMPOSIO.jpg" alt=""/>
                    </div>
                    <!-- fecha y botón -->
                    <div>
                        <span>Junio 05, 2022</span><a href="#">Institucional</a>
                    </div>
                    <!-- Párrafo del artículo -->
                    <p>
                        Conoce los detalles de la primera feria internacional del emprendimiento
                    </p>
                </article>
                <article class="article">
                    <!-- imagen aluciva -->
                    <div class="img">
                        <img src="img/CP_NOTICIA.png"  alt=""/>
                    </div>
                    <!-- fecha y botón -->
                    <div>
                        <span>Junio 05, 2022</span><a href="#">Institucional</a>
                    </div>
                    <!-- Párrafo del artículo -->
                    <p>
                        Conoce los detalles de la primera feria internacional del emprendimiento
                    </p>
                </article>
                <article class="article">
                    <!-- imagen aluciva -->
                    <div class="img">
                        <img src="img/TRANSMISION_SIMPOSIO.jpg" alt=""/>
                    </div>
                    <!-- fecha y botón -->
                    <div>
                        <span>Junio 05, 2022</span><a href="#">Institucional</a>
                    </div>
                    <!-- Párrafo del artículo -->
                    <p>
                        Conoce los detalles de la primera feria internacional del emprendimiento
                    </p>
                </article>
                <article class="article">
                    <!-- imagen aluciva -->
                    <div class="img">
                        <img src="img/BOLETÍN.jpg" alt=""/>
                    </div>
                    <!-- fecha y botón -->
                    <div>
                        <span>Junio 05, 2022</span><a href="#">Institucional</a>
                    </div>
                    <!-- Párrafo del artículo -->
                    <p>
                        Conoce los detalles de la primera feria internacional del emprendimiento
                    </p>
                </article>
           </div>
       </section>
       <!-- footer -->
       <footer class="footer">
           <div class="foot">
                Julio Martínez &copy; <span id="year"></span>
           </div>
       </footer>
    </main>
    <script src="js/script.js"></script>
</body>
</html>














CSS
*{
    /*border-style: dashed;
    margin: 0;*/
    box-sizing: border-box;
}


body{
  font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
  margin: 0;  
}


a{
    text-decoration: none;
}


.container{
   display: grid;
   grid-template-areas:
   'header header header'
   'nav nav nav'
   'slider slider slider'
   'section section section'
   'footer footer footer'
   ;
   column-gap: 10px;
   align-items: center;
}


/*
    header
*/
.header{
    grid-area: header;
    background-color: #67B5DD;
    color: #ffffff;
}


.nav1{
    padding: 10px;
}


.nav1 i{
    margin-left: 20px;
}


/*
    nav
*/
.nav{
    grid-area: nav;
    background-color: #ffffff;
    width: 80%;
    margin: 0 auto;
}


.menu{
    display: grid;
    grid-template-columns: 1fr 3fr 1fr;
    align-items: center;
}


.logo{
    background: #fff;
}


.logo img{
    width: 80%;
    height: auto;
}


.nav2 ul{
    display: flex;
    list-style: none;
    align-content: center;
}


.nav2 a{
    color: #333;
    font-weight: bold;
    text-align: center;
    line-height: 20px;
    overflow-wrap: break-word;
    padding: 10px 12px;
}


.nav2 a:hover {
    color: orange;
}


.button{
    background-color: #9DBA4C;
    border: none;
    color: #fff;
    border-radius: 15px;
    font-weight: bold;
    padding: 10px;
}
/*
   slider
*/
.slider{
    grid-area: slider;
    background: url(../img/PDI_Banner.png);
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
    height: 600px;
}


/*
    section
*/
.section{
    grid-area: section;
    background-color: #ffffff;
}


.articles{
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-gap: 40px;
    width: 80%;
    margin: 0 auto;
    padding: 10px;
}


.article{
    border-radius: 15px;
}


.article span{
    color: #1ea8da;
    font-weight: 100;
    font-size: small;
    margin-right: 20px;
}


.article a{
    background-color: #9DBA4C;
    border: none;
    color: #fff;
    border-radius: 20px;
    font-weight: bold;
    padding-left: 15px;
    padding-right: 15px;
}


.article img{
    width: 100%;
    border-radius: 15px;
    opacity: 0.9;


    transition: transform 2s;
    -moz-transition: transform 2s;
    -webkit-transition: transform 2s;
    -o-transition: transform 2s;
    -ms-transition: transform 2s;


    transition: opacity 1s ease-in-out;
    -moz-transition: transform 1s ease-in-out;
    -webkit-transition: transform 1s ease-in-out;
    -o-transition: transform 1s ease-in-out;
    -ms-transition: transform 1s ease-in-out;
}


.article img:hover{
    opacity: 1;
    transform: scale(1.1);
}


.article .img{
    border-radius: 15px;
    overflow: hidden;
}
/*
   footer
*/
.footer{
    grid-area: footer;
    background-color: #3d9dd8;
    align-content: center;
    align-items: center;
}


.foot{
    color: #ffffff;
    text-align: center;
    height: auto;
    padding: 20px;
}
/******************* MEDIA QUERIES ******************/


@media all and (max-width: 768.99999px){
    .nav{
        width: 100%;
    }


    .menu{
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        align-items: center;
        margin-right: 15px;
    }


    .nav2 ul li{
        margin-right: 0;
    }


    .articles{
        display: grid;
        grid-template-columns: auto auto;
        grid-template-rows: auto auto;
        grid-gap: 5px;
        width: 100%;
        margin: 0 auto;
        padding: 10px;
    }
}


@media all and (max-width: 375.99999px){
    .menu{
        align-items: left;
    }


    .logo{
        display: none;
    }


    .nav{
        width: 100%;
        margin: auto;
    }


    .nav2 ul{
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        margin: 0;
        text-align: left;
    }


    .nav2 a{
        font-weight: lighter;
        white-space: nowrap;
    }


    .nav2 ul li{
        text-align: left;
    }


    .slider{
        width: 100%;
        height: 60px;
    }


    .articles{
        display: grid;
        grid-template-columns: auto;
        grid-template-rows: auto;
        row-gap: 5px;
        width: 100%;
    }
}








JS


const foot = document.getElementById('year');


const year = new Date().getFullYear();


foot.innerHTML = year
Semana 8 Diplomado. Laboratorio
https://htmlcolorcodes.com/es/tabla-de-colores/


<!DOCTYPE html>
<html lang="en">
    <head>
        <title>Menu Responsivo</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link href="./css/style.css" rel="stylesheet">
    </head>
    <body>
        <main>
            <header>
                Header Aqui
            </header>
            <nav>
                <button id="menu">
                    <i class="fa-solid fa-bars"></i>
                </button>
                <ul id="list">
                    <li>Link 1</li>
                    <li>Link 2</li>
                    <li>Link 3</li>
                    <li>Link 4</li>
                </ul>
            </nav>
            <section>
                Section aquí
            </section>
            <footer>
                Footer Aquí
            </footer>
        </main>
        <script src="./js/script.js"></script>
    </body>
</html>






@import 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css';


header{
    background-color: #229954;
}


nav{
    background-color: #1ABC9C;
    font-size: 1.5rem;
    width: 100%;
}


nav ul{
    list-style: none;
    display: flex;
    padding: 10px;
}


nav ul li{
    padding: 0.5rem;
}


nav ul li:hover{
    padding: 0.5rem;
    background-color: bisque;
}


#menu{
    display: none;
}


section{
    background-color: #21618C;
}


footer{
    background-color: #DAF7A6;
}


@media all and (max-width: 425.99999px){
    body{
        background-color: aqua;
    }


    /*barra en media query*/
    nav ul{
        list-style: none;
        display: none;
        padding: 10px;
        z-index: 999;
        margin-top: -20px;
    }


    #menu{
        background-color: transparent;
        display: block;
        font-size: 2rem;
        padding: 10px;
        opacity: 0.5;
        border: none;
    }


    #menu:hover{
        opacity: 1;
        cursor: pointer;
    }


    #menu:active{
        opacity: 1;
        cursor: pointer;
    }


    #list{
        height: 300px;
    }
}
















const buttonMenu = document.getElementById('menu');
const list = document.getElementById('list');
let show = true;


buttonMenu.addEventListener('click', () => {
    show = !show;
    if(show){
        list.style.display = 'block';  
    }else{
        list.style.display = 'none';
    }
}, true);


window.addEventListener('resize', () => {
    const width = screen.width;
    if(width >= 425.99999){
        list.style.display = 'flex';  
    }else{
        list.style.display = 'none';  
        show = false;
    }
}, true);


(function(){
    const width = screen.width;
    if(width >= 425.99999){
        list.style.display = 'flex';  
    }else{
        list.style.display = 'block';  
    }
})();


________________


VideoConferencia 9 React.js
index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import Main from './components/Main';


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
    <Main />
);




config.js


/**
 * Base URL
 */
 export const API_URL = 'https://newsapi.org/v2';
 /**
  * COUNTRY
  */
 export const API_COUNTRY = 'co';
 /**
  * Autor
  */
 export const AUTOR = 'Julio Martinez';


.env
REACT_APP_API_TOKEN=17a868aa7b7643a6a2738a8f06d92f1e


para instalar dotenv
npm install dotenv


Main.js


import React, { useEffect, useState } from 'react'
import Footer from './Footer'
import Header from './Header'
import Noticias from './Noticias'
import { AUTOR, API_URL, API_COUNTRY } from '../config'
import './Main.css'




export default function Main() {


  const [noticias, setNoticias] = useState([])


  useEffect(() => {
    getNoticias();
  }, []);


  const getNoticias = async (categoria = 'general') => {
    const URL = `${ API_URL}/top-headlines?country=${API_COUNTRY}&category=${categoria}&apiKey=${process.env.REACT_APP_API_TOKEN}`;
    await fetch(URL)
    .then(resp => resp.json())
    .then(data => {
        console.log(data.articles)
        setNoticias(data.articles)
    })
    .catch(error => console.log(error))
  }


  return (//JSX
    <div className="container mt-3">
        <Header getNoticias={getNoticias}/>
        <Noticias noticias={noticias}/>
        <Footer autor={AUTOR}/>
    </div>
  )
}










Header.js


import React from 'react'


export default function Header({getNoticias}) {


    const categoriaRef = React.createRef();


    const enviarCategoria = () => {
        const categoria = categoriaRef.current.value;
        getNoticias(categoria);
    }


  return (
    <nav className="navbar bg-dark">
    <div className="container-fluid">
        <h1 className="navbar-brand">Noticias Colombia</h1>
        <div className="d-flex" role="search">
            <select
                onChange={enviarCategoria}
                ref={categoriaRef}
                className="form-select"
                aria-label="Categorias"
            >
               <option selected value="general">General</option>
                <option value="business">Business</option>
                <option value="entertainment">Entertainment</option>
               
                <option value="health">Health</option>
                <option value="science">Science</option>
                <option value="sports">Sports</option>
                <option value="technology">Technology</option>
            </select>
            <button
                className="btn btn-outline-success" type="button"
                onClick={enviarCategoria}
            >
                Search
            </button>
        </div>
    </div>
</nav>
  )
}








Noticias.js


import React from 'react'
import Noticia from './Noticia'


export default function Noticias({noticias}) {
  return (
    <div class="row row-cols-1 row-cols-md-2 g-4 my-2">
    {noticias.map((noticia, index) => {
        return (<Noticia key={index} noticia={noticia}/>);
    })}
</div>
  )
}


















Footer.js


import React from 'react'


export default function Footer({autor}) {//destructoring
  return (
    <div>{autor}</div>
  )
}










Main.css


h1{
    font-family: Verdana, Geneva, Tahoma, sans-serif;
    color: #fff !important;
}


.my-select{
    margin-right: 5px;
}


@media(min-width: 768px){
    .display-1{
        font-size: 2.5rem;
    }
}








Noticia.js


import React from 'react'


export default function Noticia({noticia}) {


  const {urlToImage, title, url, content, publishedAt, source} = noticia;


  return (
<div className="col">
    <div className="card">
      <img src={urlToImage} className="card-img-top" alt=""/>
      <small className='text-muted mx-3'>{publishedAt}</small>
      <div className="card-body">
        <h5 className="card-title">{title}</h5>
        <p className="card-text">{content}</p>
        <a
            href={url}
            className="btn btn-outline-dark"
            target='_blank'
        >
           {source.name}
        </a>
      </div>
    </div>
  </div>
  )
}
















BASE DE DATOS DEL PROYECTO HELPMEIUD


-- DROP DATABASE helpme_iud;


CREATE DATABASE IF NOT EXISTS helpme_iud;


USE helpme_iud;


CREATE TABLE IF NOT EXISTS roles(
    id INT NOT NULL AUTO_INCREMENT,
    nombre VARCHAR(45) NOT NULL,
    descripcion TEXT NULL,
    PRIMARY KEY(id)
);


CREATE TABLE IF NOT EXISTS usuarios(
    id INT NOT NULL AUTO_INCREMENT,
    username VARCHAR(120) NOT NULL,
    nombre VARCHAR(120) NOT NULL,
    apellido VARCHAR(120) NULL,
    password VARCHAR(250) NULL,
    fecha_nacimiento DATE NULL,
    enabled TINYINT NULL DEFAULT 1,
    red_social TINYINT NULL DEFAULT 0,
    image TEXT NULL DEFAULT 'https://happytravel.viajes/wp-content/uploads/2020/04/146-1468479_my-profile-icon-blank-profile-picture-circle-hd.png',
    PRIMARY KEY(id),
    UNIQUE(username)
);


CREATE TABLE IF NOT EXISTS roles_usuarios(
    roles_id INT NOT NULL,
    usuarios_id INT NOT NULL,
    PRIMARY KEY(roles_id, usuarios_id),
    FOREIGN KEY (roles_id) REFERENCES roles(id),
    FOREIGN KEY (usuarios_id) REFERENCES usuarios(id)
);


CREATE TABLE IF NOT EXISTS delitos(
    id INT NOT NULL AUTO_INCREMENT,
    nombre VARCHAR(45) NOT NULL,
    descripcion TEXT NULL,
    usuarios_id INT NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (usuarios_id) REFERENCES usuarios(id)
);


CREATE TABLE IF NOT EXISTS casos(
    id INT NOT NULL AUTO_INCREMENT,
    fecha_hora DATETIME NULL DEFAULT now(),
    latitud FLOAT NULL,
    longitud FLOAT NULL,
    altitud FLOAT NULL,
    visible TINYINT NULL DEFAULT 1,
    descripcion VARCHAR(200) NULL,
    url_map TEXT NULL,
    rmi_url TEXT NULL,
    usuarios_id INT NOT NULL,
    delitos_id INT NOT NULL,
    PRIMARY KEY(id),
    FOREIGN KEY (usuarios_id) REFERENCES usuarios(id),
    FOREIGN KEY (delitos_id) REFERENCES delitos(id)
);
/*POPULATION DE LAS TABLAS*/




echo "# back-end-helpmeiud-v2" >> .gitignore


12-07-2022
  

app de cliente web socket BTC


<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet"/>


https://iudigital.edu.co/Style%20Library/images/favicon.ico


index.js


import React from 'react';
import ReactDOM from 'react-dom/client';
import Main from './components/Main';


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
    <Main />
);




Main.js


import dayjs from 'dayjs';
import React, { useEffect, useState } from 'react';
import { w3cwebsocket as W3Cwebsocket} from 'websocket';
import { AUTOR, TITLE, URL_WS, YEAR } from '../config';
import Footer from './Footer';
import Grafico from './Grafico';
import Header from './Header';




const ws = new W3Cwebsocket(URL_WS);


export default function Main() {


  const [currency, setCurrency] = useState([]);


  useEffect(() => {
    setTimeout(() => {
        suscribir();  
    }, 100)
  }, []);


  const suscribir = () => {
    ws.onopen = () => {
        console.log('Cliente websocket connectado!');
        ws.send(
            JSON.stringify({
                "event": "bts:subscribe",
                "data": {
                    "channel": "live_trades_btcusd"
                }
            })
        );
    };


    ws.onmessage = (message) => {
        const data = JSON.parse(message.data);
        if(data){
            const info = data.data;
            info.timestamp = dayjs(info.timestamp*1000).format('YYYY-MM-DDTHH:mm:ss');
            setCurrency(c => {
                if(c.length >= 100){
                    c = c.slice(-99);
                }
                return [...c, info]
            });
        }
        console.log(data)
    };


    ws.on('error', console.log);
  }


  return (
    <div className='container my-2'>
        <Header title={TITLE}/>
        <Grafico currency={currency}/>
        <Footer autor={AUTOR} year={YEAR}/>
    </div>
  )
}


















Footer.js


import React from 'react'


export default function Footer({autor, year}) {
  return (
    <footer className='mt-auto'>
        <p>{autor} &copy; {year}</p>
    </footer>
  )
}








Header.js


import React from 'react'


export default function Header({title = 'Currency IUD'}) {
  return (
    <nav className="navbar bg-light">
    <div className="container-fluid">
        <span className="navbar-brand mb-0 h1">{title}</span>
    </div>
    </nav>
  )
}










config.js
export const URL_WS = 'wss://ws.bitstamp.net/';


export const TITLE = 'Dólar y Bitcoin';


export const AUTOR = 'Julio Martínez';


export const YEAR = new Date().getFullYear();




Grafico.js


import React from 'react'
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';


export default function Grafico({currency}) {
  return (
    <div className='container fluid'>
        <div className='row flex-row flex-nowrap'>
        <LineChart
          width={800}
          height={500}
          data={currency}
          margin={{
            top: 5,
            right: 30,
            left: 20,
            bottom: 5,
          }}
        >
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="timestamp" />
          <YAxis />
          <Tooltip />
          <Legend />
          <Line type="monotone" dataKey="amount" stroke="#8884d8" activeDot={{ r: 10 }}
          name="BTC"/>
          {/*<Line type="monotone" dataKey="price" stroke="#82ca9d" />*/}
        </LineChart>
        </div>
      </div>
  )
}












instalación de librerías necesarias


npm install websocket
npm install dayjs
npm install recharts




*****************************************************************************************************


—----------------------------------------------------------------------------------------------------------------------


Encuentro Sincrónico 19-07-2022
LAB CAJERO.






  



Cliente.java


   /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto;


/**
 *
 * @author JULIOCESARMARTINEZ
 */
public class Cliente {
    
    private int id;
    private String nombre;
    private String apellido;
    private int numCard;
    private int pin;
    private double saldo;
    private int intentos;


    public Cliente() {
    }


    public Cliente(int id, String nombre, String apellido, int numCard, int pin, double saldo, int intentos) {
        this.id = id;
        this.nombre = nombre;
        this.apellido = apellido;
        this.numCard = numCard;
        this.pin = pin;
        this.saldo = saldo;
        this.intentos = intentos;
    }


    public int getId() {
        return id;
    }


    public void setId(int id) {
        this.id = id;
    }


    public String getNombre() {
        return nombre;
    }


    public void setNombre(String nombre) {
        this.nombre = nombre;
    }


    public String getApellido() {
        return apellido;
    }


    public void setApellido(String apellido) {
        this.apellido = apellido;
    }


    public int getNumCard() {
        return numCard;
    }


    public void setNumCard(int numCard) {
        this.numCard = numCard;
    }


    public int getPin() {
        return pin;
    }


    public void setPin(int pin) {
        this.pin = pin;
    }


    public double getSaldo() {
        return saldo;
    }


    public void setSaldo(double saldo) {
        this.saldo = saldo;
    }


    public int getIntentos() {
        return intentos;
    }


    public void setIntentos(int intentos) {
        this.intentos = intentos;
    }


    @Override
    public String toString() {
        return "Cliente{" + "id=" + id + ", nombre=" + nombre + ", apellido=" + apellido + ", numCard=" + numCard + ", pin=" + pin + ", saldo=" + saldo + ", intentos=" + intentos + '}';
    }


    
}




……………… JFPrincipal.java ………………………….


static Cliente[] clientesArray = {
        new Cliente(1, "Julio", "Martinez", 111111, 1234, 1000000, 0),
        new Cliente(2, "Duvan", "Henao", 222222, 4321, 2000000, 0),
        new Cliente(3, "Libardo", "Gomez", 333333, 5555, 1500000, 0)
    };
    static List<Cliente> clientes = Arrays.asList(clientesArray);
    
    Cliente cliente;
    
    int operacion = 0;


public JFPrincipal() {
        initComponents();
        cliente = new Cliente();
    }




private void inicializar(){
        jLNombres.setText("");
        jTFValor.setVisible(false);
        this.habilitarTeclado(false);
        this.habilitarOpciones(false);
        this.habilitarPrint(false);
    }
    
    private void habilitarTeclado(boolean flag){
        jBUno.setVisible(flag);
        jBDos.setVisible(flag);
        jBTres.setVisible(flag);
        jBCuatro.setVisible(flag);
        jBCinco.setVisible(flag);
        jBSeis.setVisible(flag);
        jBSiete.setVisible(flag);
        jBOcho.setVisible(flag);
        jBNueve.setVisible(flag);
        jBCero.setVisible(flag);
        jBBorrar.setVisible(flag);
        jBAceptar.setVisible(flag);
        
        jPassword.setVisible(flag);
        jLMensajes.setVisible(flag);
    }
    
    private void habilitarOpciones(boolean flag){
        jBSaldo.setVisible(flag);
        jBRetirar.setVisible(flag);
        jBPin.setVisible(flag);
    }
    
    private void habilitarPrint(boolean flag){
        jLPrint.setVisible(flag);
        jBSI.setVisible(flag);
        jBNO.setVisible(flag);
    }




private void jBIngresarTarjetaActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        // TODO add your handling code here:
        this.inicializar();
        this.buscar();
    }                                                 


private void buscar(){
        operacion = 0;
        jLMensajes.setText("");
        String cardStr = jTFNoTarjeta.getText();
        int card = Integer.parseInt(cardStr.trim());
        
        Optional<Cliente> clienteOpt =  clientes.stream()
                .filter(c -> c.getNumCard() == card)
                .findFirst();
        jLMensajes.setVisible(true);
        if(clienteOpt.isPresent()){
            jLMensajes.setText("DIGITA PIN");
            this.habilitarTeclado(true);
            jPassword.setVisible(true);
            cliente = clienteOpt.get();
            jLNombres.setText(cliente.getNombre() +" " + cliente.getApellido());
        }else{
            jLMensajes.setText("Tarjeta Erronea!");
        }
    }


     private void setTeclado(int val){
        switch(operacion){
            case 0:// validar
                concatenarPin(val);
                break;
            case 1:// saldo
                break;
            case 2:// retiro
                concatenarValor(val);
                break;
        }
    }


    public void concatenarValor(int val){
        jTFValor.setText(jTFValor.getText() + val);
    }




private void concatenarPin(int val){
        String pass = String.valueOf(jPassword.getPassword());
        if(pass.length() < 4){
            jPassword.setText(pass + val);
        }
    }




private void retroceso(){
        switch(operacion){
            case 0:
            case 3:
            case 4:
                String pass = String.valueOf(jPassword.getPassword());
                if(pass.length() > 0){
                    pass = pass.substring(0, pass.length() - 1);
                    jPassword.setText(pass);
                }else{
                    jPassword.setText("");
                }
                break;
            case 1:// saldo
                break;
           
            case 2:// retiro
            
                String retiro = jPassword.getText();
                if(retiro.length() > 0){
                    retiro = retiro.substring(0, retiro.length() - 1);
                    jTFValor.setText(retiro);
                }else{
                    jTFValor.setText("");
                }
                break;
                
             default:
                 
        }
    }






private void jBBorrarActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        retroceso();
    }  


private void jBUnoActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // TODO add your handling code here:
        setTeclado(1);
    }                                     


    private void jBDosActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // TODO add your handling code here:
        setTeclado(2);
    }                                     


    private void jBTresActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
        setTeclado(3);
    }                                      


    private void jBCuatroActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        setTeclado(4);
    }                                        


    private void jBCincoActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        setTeclado(5);
    }                                       


    private void jBSeisActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
        setTeclado(6);
    }                                      


    private void jBSieteActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        setTeclado(7);
    }                                       


    private void jBOchoActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
        setTeclado(8);
    }                                      


    private void jBNueveActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        setTeclado(9);
    }     




private void jBCeroActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
        setTeclado(0);
    }  


private void jBAceptarActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        switch(operacion){
            case 0:// 
                aceptar();
                break;
            case 1:// consulta
                break;
            case 2:// retiro
                jLMensajes.setText("Digita valor $");
                retirar();
                break;
            case 3:
                cambiarPin();
                break;
            case 4:
                confirmarPin();
                break;
            default:
                aceptar();
        }
    }                                         


                          


    private void aceptar(){
        String pass = String.valueOf(jPassword.getPassword());
        if(pass.length() == 0){
            jLMensajes.setText("");
            return;
        }
        validar();
        jLMensajes.setText("");
    }
    
    private void validar(){
        jLMensajes.setVisible(false);
        if(cliente.getIntentos() >= 3){
            jLMensajes.setText("Tarjeta Bloqueada");
            jLMensajes.setVisible(true);
            return;
        }
        String pass = String.valueOf(jPassword.getPassword());
        int pin = Integer.parseInt(pass.trim());
        if(cliente.getPin() == pin){
            habilitarOpciones(true);
            jLMensajes.setVisible(false);
        }else{
            jLMensajes.setVisible(true);
            jLMensajes.setText("PIN Inválido!");
            jPassword.setVisible(true);
            cliente.setIntentos(cliente.getIntentos() + 1);
            clientes.set(cliente.getId() - 1, cliente);
        }
    }


private void jBSaldoActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        operacion = 1;
        consultarSaldo();
    } 


    private void confirmarPin(){
        String pass = String.valueOf(jPassword.getPassword());
        int pin = Integer.parseInt(pass.trim());
        inicializar();
        jLMensajes.setVisible(true);
        jLMensajes.setText("Cambio exitoso");
        cliente.setPin(pin);
        clientes.set(cliente.getId() - 1, cliente);
        habilitarPrint(true);
    }




            
    private void cambiarPin(){
        String pass = String.valueOf(jPassword.getPassword());
        int pin = Integer.parseInt(pass.trim());
        if(pin < 4){
            jLMensajes.setText("Pin debe tener 4");
            return;
        }
        if(cliente.getPin() != pin){
           inicializar();
           jLMensajes.setText("Pin errado");
           return;
        }
        operacion = 4;
        jLMensajes.setVisible(true);
        jLMensajes.setText("Digite nuevo pin");
        jPassword.setText("");
    }




    private void retirar(){
        jLMensajes.setText("Digite valor $");
        String valor = jTFValor.getText();
        if(valor.length() == 0){
            return;
        }
        jTFValor.setVisible(false);
        double retiro = Double.parseDouble(valor);
        if(retiro > cliente.getSaldo()){
            inicializar();
            jLMensajes.setVisible(true);
            jLMensajes.setText("Valor mayor al saldo");
            jTFValor.setText("");
            return;
        }
        cliente.setSaldo(cliente.getSaldo() - retiro);
        clientes.set(cliente.getId() - 1, cliente);
        jTFValor.setText("");
        inicializar();
        habilitarPrint(true);
        
        clientes.stream().forEach(c -> {
            System.out.println(c);
        });
    }
                                      


    private void consultarSaldo(){
        inicializar();
        jLMensajes.setText("");
        jLMensajes.setVisible(true);
        jLMensajes.setText("Saldo: $" + cliente.getSaldo());
        habilitarPrint(true);
    }




private void jBRetirarActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        operacion = 2;
        inicializar();
        habilitarTeclado(true);
        jPassword.setVisible(false);
        jTFValor.setVisible(true);
    }  










::::::::::::::::::::::::::::::::::::::13-07-2022 PROYECTO HELPMEIUD ::::::::::::::::::::::::::::::::::::


https://github.com/julioiud/back-end-helpmeiud-v2.git






server.port=8082
server.servlet.context-path=/api/v1
#http://localhost:8082/api/v1
spring.datasource.url=jdbc:mysql://localhost:3306/helpme_iud?serverTimezone=America/Bogota
spring.datasource.username=root
spring.datasource.password=


#orm: Object relational mapping
#jpa: API de persistencia de Java


spring.jpa.hibernate.ddl-auto=none


#spring.batch.jdbc.initialize-schema=always
#data.sql para population y schema.sql para crear tablas


#mostrar los script sql
spring.jpa.show-sql=true


# formatea el codigo sql que se muestra en consola
# para mejor lectura
spring.jpa.properties.hibernate.format_sql=true


# properties para logging


# properties para smtp


# properties para archivos




  









………………………………
TestController
package co.edu.iudigital;


import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;


@RestController
@RequestMapping("/test")
public class TestController {


        @GetMapping
        public ResponseEntity<String> test(){
                return ResponseEntity.ok().body("OK!");
        }
}




………………………………
pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
        <modelVersion>4.0.0</modelVersion>
        <parent>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-parent</artifactId>
                <version>2.7.1</version>
                <relativePath/> <!-- lookup parent from repository -->
        </parent>
        <groupId>co.edu.iudigital</groupId>
        <artifactId>back-end-helpmeiud</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <name>back-end-helpmeiud</name>
        <description>API Rest de HelmeIUD</description>
        <properties>
                <java.version>1.8</java.version>
        </properties>
        <dependencies>
                <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-data-jpa</artifactId>
                </dependency>


                <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-devtools</artifactId>
                        <scope>runtime</scope>
                        <optional>true</optional>
                </dependency>
                <dependency>
                        <groupId>mysql</groupId>
                        <artifactId>mysql-connector-java</artifactId>
                        <scope>runtime</scope>
                </dependency>
                <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-test</artifactId>
                        <scope>test</scope>
                </dependency>
                <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-web</artifactId>
                </dependency>
        </dependencies>


        <build>
                <plugins>
                        <plugin>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-maven-plugin</artifactId>
                        </plugin>
                </plugins>
        </build>


</project>






………………………………..
script.sql


-- DROP DATABASE helpme_iud;


CREATE DATABASE IF NOT EXISTS helpme_iud;


USE helpme_iud;


CREATE TABLE IF NOT EXISTS roles(
    id INT NOT NULL AUTO_INCREMENT,
    nombre VARCHAR(45) NOT NULL,
    descripcion TEXT NULL,
    PRIMARY KEY(id)
);


CREATE TABLE IF NOT EXISTS usuarios(
    id INT NOT NULL AUTO_INCREMENT,
    username VARCHAR(120) NOT NULL,
    nombre VARCHAR(120) NOT NULL,
    apellido VARCHAR(120) NULL,
    password VARCHAR(250) NULL,
    fecha_nacimiento DATE NULL,
    enabled TINYINT NULL DEFAULT 1,
    red_social TINYINT NULL DEFAULT 0,
    image TEXT NULL DEFAULT 'https://happytravel.viajes/wp-content/uploads/2020/04/146-1468479_my-profile-icon-blank-profile-picture-circle-hd.png',
    PRIMARY KEY(id),
    UNIQUE(username)
);


CREATE TABLE IF NOT EXISTS roles_usuarios(
    roles_id INT NOT NULL,
    usuarios_id INT NOT NULL,
    PRIMARY KEY(roles_id, usuarios_id),
    FOREIGN KEY (roles_id) REFERENCES roles(id),
    FOREIGN KEY (usuarios_id) REFERENCES usuarios(id)
);


CREATE TABLE IF NOT EXISTS delitos(
    id INT NOT NULL AUTO_INCREMENT,
    nombre VARCHAR(45) NOT NULL,
    descripcion TEXT NULL,
    usuarios_id INT NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (usuarios_id) REFERENCES usuarios(id)
);


CREATE TABLE IF NOT EXISTS casos(
    id INT NOT NULL AUTO_INCREMENT,
    fecha_hora DATETIME NULL DEFAULT now(),
    latitud FLOAT NULL,
    longitud FLOAT NULL,
    altitud FLOAT NULL,
    visible TINYINT NULL DEFAULT 1,
    descripcion VARCHAR(200) NULL,
    url_map TEXT NULL,
    rmi_url TEXT NULL,
    usuarios_id INT NOT NULL,
    delitos_id INT NOT NULL,
    PRIMARY KEY(id),
    FOREIGN KEY (usuarios_id) REFERENCES usuarios(id),
    FOREIGN KEY (delitos_id) REFERENCES delitos(id)
);
/*POPULATION DE LAS TABLAS*/


……………………
para hacer la petición al controler de pruebas:


http://localhost:8082/api/v1/test


  





Videoconferencia No. 13
  



14-07-2022


………………………………………………………………………………………………….
Role:java


package co.edu.iudigital.model;


import java.io.Serializable;
import java.util.List;


import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.persistence.Table;


@Entity
@Table(name = "roles")
public class Role implements Serializable{


    /**
         * 
         */
        private static final long serialVersionUID = -2928234787085757170L;


        //id INT NOT NULL AUTO_INCREMENT
        @Id // PRIMARY KEY(id)
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;
    
    //nombre VARCHAR(45) NOT NULL
        @Column(name = "nombre", length = 45, nullable = false)
    private String nombre;
        
        //descripcion TEXT NULL
    private String descripcion;
    
    @ManyToMany(mappedBy = "roles")
    private List<Usuario> usuarios;


        public Long getId() {
                return id;
        }


        public String getNombre() {
                return nombre;
        }


        public String getDescripcion() {
                return descripcion;
        }


        public void setId(Long id) {
                this.id = id;
        }


        public void setNombre(String nombre) {
                this.nombre = nombre;
        }


        public void setDescripcion(String descripcion) {
                this.descripcion = descripcion;
        }


        public List<Usuario> getUsuarios() {
                return usuarios;
        }


        public void setUsuarios(List<Usuario> usuarios) {
                this.usuarios = usuarios;
        }
        
        
}




…………………………………………………………………………………………………..
Usuario.java


package co.edu.iudigital.model;


import java.io.Serializable;
import java.time.LocalDate;
import java.util.List;


import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.PrePersist;
import javax.persistence.Table;


@Entity
@Table(name = "usuarios")
public class Usuario implements Serializable{


    /**
         * 
         */
        private static final long serialVersionUID = 9132267639491250466L;


        //id INT NOT NULL AUTO_INCREMENT
        @Id // PRIMARY KEY(id)
        @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
 
    //username VARCHAR(120) NOT NULL,
        @Column(name = "username", 
                        length = 120, nullable = false, unique = true)
        private String username;
        
    //nombre VARCHAR(120) NOT NULL,
        @Column(name = "nombre", length = 120, nullable = false)
        private String nombre;
        
    //apellido VARCHAR(120) NULL,
        @Column(name = "apellido", length = 120)
        private String apellido;
    
        //password VARCHAR(250) NULL,
        @Column(name = "password", length = 250)
        private String password;
        
        //fecha_nacimiento DATE NULL,
        @Column(name = "fecha_nacimiento")
    private LocalDate fechaNacimiento;
        
        //enabled TINYINT NULL DEFAULT 1
        //@Column(columnDefinition = "NULL DEFAULT 1")
    private Boolean enabled;
        
        //red_social TINYINT NULL DEFAULT 0,
        @Column(name = "red_social")
    private Boolean redSocial;
    
        //image TEXT NULL DEFAULT 'https://happytravel.viajes/wp-content/uploads/2020/04/146-1468479_my-profile-icon-blank-profile-picture-circle-hd.png',
        private String image;
        
        @ManyToMany(cascade = CascadeType.ALL)
        @JoinTable(name = "roles_usuarios", 
                          joinColumns = {
                                          @JoinColumn(name = "usuarios_id")
                          },
                          inverseJoinColumns = {
                                          @JoinColumn(name = "roles_id")
                          })
        private List<Role> roles;
        
        @PrePersist
        public void persist() {
                if(enabled == null) {
                        enabled = true;
                }
                if(redSocial == null) {
                        redSocial = false;
                }
                if(image == null || "".equals(image)) {
                        image = "https://happytravel.viajes/wp-content/uploads/2020/04/146-1468479_my-profile-icon-blank-profile-picture-circle-hd.png";
                }
        }


        public Long getId() {
                return id;
        }


        public String getUsername() {
                return username;
        }


        public String getNombre() {
                return nombre;
        }


        public String getApellido() {
                return apellido;
        }


        public String getPassword() {
                return password;
        }


        public LocalDate getFechaNacimiento() {
                return fechaNacimiento;
        }


        public Boolean getEnabled() {
                return enabled;
        }


        public Boolean getRedSocial() {
                return redSocial;
        }


        public String getImage() {
                return image;
        }


        public void setId(Long id) {
                this.id = id;
        }


        public void setUsername(String username) {
                this.username = username;
        }


        public void setNombre(String nombre) {
                this.nombre = nombre;
        }


        public void setApellido(String apellido) {
                this.apellido = apellido;
        }


        public void setPassword(String password) {
                this.password = password;
        }


        public void setFechaNacimiento(LocalDate fechaNacimiento) {
                this.fechaNacimiento = fechaNacimiento;
        }


        public void setEnabled(Boolean enabled) {
                this.enabled = enabled;
        }


        public void setRedSocial(Boolean redSocial) {
                this.redSocial = redSocial;
        }


        public void setImage(String image) {
                this.image = image;
        }


        public List<Role> getRoles() {
                return roles;
        }


        public void setRoles(List<Role> roles) {
                this.roles = roles;
        }


}






…………………………………………………………………………………………………..


Delito.java
…………………………………………………………………………………………………..
package co.edu.iudigital.model;


import java.io.Serializable;


import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;


@Entity
@Table(name = "delitos")
public class Delito implements Serializable{


    /**
         * 
         */
        private static final long serialVersionUID = 6225803848687364814L;


        //id INT NOT NULL AUTO_INCREMENT
        //PRIMARY KEY (id)
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
        
    //nombre VARCHAR(45) NOT NULL
        @Column(name = "nombre", length = 45, nullable = false)
        private String nombre;
        
    //descripcion TEXT NULL
        private String descripcion;
            
        
        //usuarios_id INT NOT NULL
    //FOREIGN KEY (usuarios_id) REFERENCES usuarios(id)
        @ManyToOne(cascade = CascadeType.ALL) // por default: fetch = EAGER
        @JoinColumn(name = "usuarios_id")
        private Usuario usuario;


        public Long getId() {
                return id;
        }






        public String getNombre() {
                return nombre;
        }






        public String getDescripcion() {
                return descripcion;
        }






        public Usuario getUsuario() {
                return usuario;
        }






        public void setId(Long id) {
                this.id = id;
        }






        public void setNombre(String nombre) {
                this.nombre = nombre;
        }






        public void setDescripcion(String descripcion) {
                this.descripcion = descripcion;
        }






        public void setUsuario(Usuario usuario) {
                this.usuario = usuario;
        }
        
        
}




……………………………………………………………………………………………..
Caso.java
………………………………………………………………………………………………
package co.edu.iudigital.model;


import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Objects;


import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.PrePersist;
import javax.persistence.Table;


@Entity
@Table(name = "casos")
public class Caso implements Serializable {
        
    /**
         * 
         */
        private static final long serialVersionUID = 7509375994430053778L;


        //id INT NOT NULL AUTO_INCREMENT,
        //PRIMARY KEY(id)
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
        //fecha_hora DATETIME NULL DEFAULT now(),
        @Column(name = "fecha_hora")
        private LocalDateTime fechaHora;
    
        //latitud FLOAT NULL,
        private Float latitud;
    
        //longitud FLOAT NULL,
        private Float longitud;
    
        //altitud FLOAT NULL,
        private Float altitud;
    
        //visible TINYINT NULL DEFAULT 1,
        private Boolean visible;
   
        //descripcion VARCHAR(200) NULL,
        @Column(name = "descripcion", length = 200)
        private String descripcion;
        
    //url_map TEXT NULL,
        @Column(name = "url_map")
        private String urlMap;
        
   // rmi_url TEXT NULL,
        @Column(name = "rmi_url")
        private String rmiUrl;
        
   // usuarios_id INT NOT NULL,
        //FOREIGN KEY (usuarios_id) REFERENCES usuarios(id),
        @ManyToOne(cascade = CascadeType.ALL)
        @JoinColumn(name = "usuarios_id")
        private Usuario usuario;
        
    //delitos_id INT NOT NULL,
    //FOREIGN KEY (delitos_id) REFERENCES delitos(id)
        @ManyToOne(cascade = CascadeType.ALL)
        @JoinColumn(name = "delitos_id")
        private Delito delito;
        
        @PrePersist
        public void init() {
                if(Objects.isNull(fechaHora)) {//fechaHora==null
                        fechaHora = LocalDateTime.now();
                }
                if(Objects.isNull(visible)) {
                        visible = true;
                }
        }


        public Long getId() {
                return id;
        }


        public LocalDateTime getFechaHora() {
                return fechaHora;
        }


        public Float getLatitud() {
                return latitud;
        }


        public Float getLongitud() {
                return longitud;
        }


        public Float getAltitud() {
                return altitud;
        }


        public Boolean getVisible() {
                return visible;
        }


        public String getDescripcion() {
                return descripcion;
        }


        public String getUrlMap() {
                return urlMap;
        }


        public String getRmiUrl() {
                return rmiUrl;
        }


        public Usuario getUsuario() {
                return usuario;
        }


        public Delito getDelito() {
                return delito;
        }


        public void setId(Long id) {
                this.id = id;
        }


        public void setFechaHora(LocalDateTime fechaHora) {
                this.fechaHora = fechaHora;
        }


        public void setLatitud(Float latitud) {
                this.latitud = latitud;
        }


        public void setLongitud(Float longitud) {
                this.longitud = longitud;
        }


        public void setAltitud(Float altitud) {
                this.altitud = altitud;
        }


        public void setVisible(Boolean visible) {
                this.visible = visible;
        }


        public void setDescripcion(String descripcion) {
                this.descripcion = descripcion;
        }


        public void setUrlMap(String urlMap) {
                this.urlMap = urlMap;
        }


        public void setRmiUrl(String rmiUrl) {
                this.rmiUrl = rmiUrl;
        }


        public void setUsuario(Usuario usuario) {
                this.usuario = usuario;
        }


        public void setDelito(Delito delito) {
                this.delito = delito;
        }
        
}


—---------------------------------------------------------------------------------------------------------------
26-07-2022 Proyecto Spring Boot (continuación)


data.sql // va a en resources


TRUNCATE roles;


INSERT INTO roles(id, nombre, descripcion) VALUES (1, "ROLE_USER", "Usuarios normales que registran");
INSERT INTO roles(id, nombre, descripcion) VALUES (2, "ROLE_ADMIN", "Usuarios administradores");








…………………………
application.properties


server.port=8082
server.servlet.context-path=/api/v1
#http://localhost:8082/api/v1
spring.datasource.url=jdbc:mysql://localhost:3306/helpme_iud?serverTimezone=America/Bogota
spring.datasource.username=root
spring.datasource.password=


#jpa: API de persistencia de Java
#orm: Object relational mapping


spring.jpa.hibernate.ddl-auto=none


#spring.batch.jdbc.initialize-schema=always
#spring.sql.init.mode=always
#data.sql para population y schema.sql para crear tablas


#mostrar los script sql
spring.jpa.show-sql=true


# formatea el codigo sql que se muestra en consola
# para mejor lectura
spring.jpa.properties.hibernate.format_sql=true


# properties para logging
logging.level.org.hibernate.SQL=INFO
logging.level.root=INFO
# properties para smtp


# properties para archivos






………………….
package co.edu.iudigital.controller;


import java.util.List;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;


import co.edu.iudigital.dto.DelitoDTO;
import co.edu.iudigital.service.IDelitoService;


@RestController
@RequestMapping("/delitos")
public class DelitoController {


        private static final Logger log = 
                        LoggerFactory.getLogger(DelitoController.class);
        
        @Autowired
        private IDelitoService delitoService;
        
        @GetMapping
        public ResponseEntity<List<DelitoDTO>> index(){
                log.info("se consultan todos los delitos");
                List<DelitoDTO> delitos = delitoService.findAll();
                return ResponseEntity.ok(delitos);
        }
}












……………
IDelitoRepository.java


package co.edu.iudigital.repository;


import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;


import co.edu.iudigital.model.Delito;


@Repository
public interface IDelitoRepository 
extends JpaRepository<Delito, Long>{


}


………………….
IRoleRepository.java


package co.edu.iudigital.repository;


import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;


import co.edu.iudigital.model.Role;


@Repository
public interface IRoleRepository 
        extends JpaRepository<Role, Long>{


}
……………….




package co.edu.iudigital.service;


import java.util.List;


import co.edu.iudigital.model.Role;


public interface IRoleService {


        List<Role> getAll();
}


………………………


package co.edu.iudigital.service;


import java.util.List;


import co.edu.iudigital.model.Role;


public interface IRoleService {


        List<Role> getAll();
}


package co.edu.iudigital.service.impl;


import java.util.List;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;


import co.edu.iudigital.model.Role;
import co.edu.iudigital.repository.IRoleRepository;
import co.edu.iudigital.service.IRoleService;


@Service
public class RoleServiceImpl implements IRoleService{


        @Autowired // inyección de dependencias
        private IRoleRepository roleRepository;
        
        @Override
        public List<Role> getAll() {
                return roleRepository.findAll();
        }


}


………………..


package co.edu.iudigital.controller;


import java.util.List;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;


import co.edu.iudigital.model.Role;
import co.edu.iudigital.service.IRoleService;


@RestController
@RequestMapping("/roles")
public class RoleController {


        @Autowired
        private IRoleService roleService;
        
        @GetMapping
        public ResponseEntity<List<Role>> index(){
                List<Role> roles = roleService.getAll();
                return ResponseEntity.ok().body(roles);
        }
}


Ejemplo:


http://localhost:8082/api/v1/roles




……………….


package co.edu.iudigital.repository;


import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Repository;


import co.edu.iudigital.model.Usuario;


@Repository
public interface IUsuarioRepository 
        extends CrudRepository<Usuario, Long>{
        
        //@Query("SELECT u FROM Usuario u WHERE u.username = ?1")
        // con @Query es otra forma para hacer la siguiente
        // consulta
        Usuario findByUsername(String username);
}






………………………………………………………..
package co.edu.iudigital.repository;


import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;


import co.edu.iudigital.model.Caso;


public interface ICasoRepository 
        extends JpaRepository<Caso, Long>{


        @Query("UPDATE Caso c SET c.visible = ?1 WHERE "
                        + "c.id = ?2")
        Boolean setVisible(Boolean visible, Long id);
}


……………….
<!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator -->
<dependency>
    <groupId>org.hibernate.validator</groupId>
    <artifactId>hibernate-validator</artifactId>
    <version>8.0.0.CR1</version>
</dependency>


…………………………………
package co.edu.iudigital.dto;


import java.io.Serializable;


import javax.validation.constraints.NotNull;




public class DelitoDTO implements Serializable{
        
        /**
         * 
         */
        private static final long serialVersionUID = 7881809134395879209L;


        private Long id;


        @NotNull(message = "Nombre es obligatorio") 
        private String nombre;
        
        private String descripcion;


        public Long getId() {
                return id;
        }


        public String getNombre() {
                return nombre;
        }


        public String getDescripcion() {
                return descripcion;
        }


        public void setId(Long id) {
                this.id = id;
        }


        public void setNombre(String nombre) {
                this.nombre = nombre;
        }


        public void setDescripcion(String descripcion) {
                this.descripcion = descripcion;
        }
        
        
}






……………………….
package co.edu.iudigital.service;


import java.util.List;


import co.edu.iudigital.dto.DelitoDTO;


public interface IDelitoService {


        //el nombre de los métodos puede ser "cualquier"
        List<DelitoDTO> findAll();
        
        DelitoDTO findById(Long id);
        
        DelitoDTO save(DelitoDTO delitoDTO);
        
        void delete(Long id);
}


………………………………
package co.edu.iudigital.dto;


import java.io.Serializable;
import java.time.LocalDateTime;


public class CasoDTO implements Serializable{


    /**
         * 
         */
        private static final long serialVersionUID = -4779886773654447822L;


        private Long id;


        private LocalDateTime fechaHora;


        private Float latitud;


        private Float longitud;


        private Float altitud;
  
        private Boolean visible;
  
        private String descripcion;


        private String urlMap;
        
        private String rmiUrl;


        private Long usuarioId;
        
        private String nombre;
        
        private String image;


        public Long getId() {
                return id;
        }


        public LocalDateTime getFechaHora() {
                return fechaHora;
        }


        public Float getLatitud() {
                return latitud;
        }


        public Float getLongitud() {
                return longitud;
        }


        public Float getAltitud() {
                return altitud;
        }


        public Boolean getVisible() {
                return visible;
        }


        public String getDescripcion() {
                return descripcion;
        }


        public String getUrlMap() {
                return urlMap;
        }


        public String getRmiUrl() {
                return rmiUrl;
        }


        public Long getUsuarioId() {
                return usuarioId;
        }


        public String getNombre() {
                return nombre;
        }


        public String getImage() {
                return image;
        }


        public void setId(Long id) {
                this.id = id;
        }


        public void setFechaHora(LocalDateTime fechaHora) {
                this.fechaHora = fechaHora;
        }


        public void setLatitud(Float latitud) {
                this.latitud = latitud;
        }


        public void setLongitud(Float longitud) {
                this.longitud = longitud;
        }


        public void setAltitud(Float altitud) {
                this.altitud = altitud;
        }


        public void setVisible(Boolean visible) {
                this.visible = visible;
        }


        public void setDescripcion(String descripcion) {
                this.descripcion = descripcion;
        }


        public void setUrlMap(String urlMap) {
                this.urlMap = urlMap;
        }


        public void setRmiUrl(String rmiUrl) {
                this.rmiUrl = rmiUrl;
        }


        public void setUsuarioId(Long usuarioId) {
                this.usuarioId = usuarioId;
        }


        public void setNombre(String nombre) {
                this.nombre = nombre;
        }


        public void setImage(String image) {
                this.image = image;
        }
        
        
}
……………….
package co.edu.iudigital.service;


import java.util.List;


import co.edu.iudigital.dto.CasoDTO;
import co.edu.iudigital.exception.RestException;


public interface ICasoService {


        // consulta todos los casos
        List<CasoDTO> findAll() throws RestException ;
        
        // crear un caso
        CasoDTO save(CasoDTO caso) throws RestException ;
        
        // inactivar el caso
        Boolean visible(Boolean visible, Long id);
        
        // consultar caso por Id
        CasoDTO findById(Long id) throws RestException ;
}






…………………


package co.edu.iudigital.service;


import java.util.List;


import co.edu.iudigital.model.Usuario;


public interface IUsuarioService {


        List<Usuario> findAll();
        
        Usuario findById(Long id);
        
        Usuario save(Usuario usuario);
        
        Usuario findByUsername(String username);
}


……………………..




package co.edu.iudigital.service;


public interface IEmailService {


        boolean sendEmail(String mensaje, 
                                                String email, String asunto);
}


……………………
package co.edu.iudigital.util;


import java.util.List;
import java.util.stream.Collectors;


import org.springframework.beans.BeanUtils;


import co.edu.iudigital.dto.CasoDTO;
import co.edu.iudigital.dto.DelitoDTO;
import co.edu.iudigital.model.Caso;
import co.edu.iudigital.model.Delito;


public interface Helper {


        public static DelitoDTO convertDelitoToDelitoDTO(Delito delito) {
                DelitoDTO delitoDTO = new DelitoDTO();
                BeanUtils.copyProperties(delito, delitoDTO);
                return delitoDTO;
        }
        
        public static Delito convertDelitoDTOToDelito(DelitoDTO delitoDTO) {
                Delito delito = new Delito();
                BeanUtils.copyProperties(delitoDTO, delito);
                return delito;
        }
        
        public static List<DelitoDTO> convertListDelitoDTO(
                        List<Delito> delitos){
                return delitos
                                .stream()
                                .map(d -> {
                                        return convertDelitoToDelitoDTO(d);
                                })
                                .collect(Collectors.toList());
        }
        
        public static CasoDTO convertCasoToCasoDTO(Caso caso) {
                CasoDTO casoDTO = new CasoDTO();
                BeanUtils.copyProperties(caso, casoDTO);
                return casoDTO;
        }
        
        public static Caso convertCasoDTOToCaso(CasoDTO casoDTO) {
                Caso caso = new Caso();
                BeanUtils.copyProperties(casoDTO, caso);
                return caso;
        }
        
        
        public static List<CasoDTO> convertListCasoDTO(
                        List<Caso> casos){
                return casos
                                .stream()
                                .map(c -> {
                                        return convertCasoToCasoDTO(c);
                                })
                                .collect(Collectors.toList());
        }
}








<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
        <modelVersion>4.0.0</modelVersion>
        <parent>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-parent</artifactId>
                <version>2.7.1</version>
                <relativePath/> <!-- lookup parent from repository -->
        </parent>
        <groupId>co.edu.iudigital</groupId>
        <artifactId>back-end-helpmeiud</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <name>back-end-helpmeiud</name>
        <description>API Rest de HelmeIUD</description>
        <properties>
                <java.version>1.8</java.version>
        </properties>
        <dependencies>
                <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-data-jpa</artifactId>
                </dependency>


                <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-devtools</artifactId>
                        <scope>runtime</scope>
                        <optional>true</optional>
                </dependency>
                <dependency>
                        <groupId>mysql</groupId>
                        <artifactId>mysql-connector-java</artifactId>
                        <scope>runtime</scope>
                </dependency>
                <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-test</artifactId>
                        <scope>test</scope>
                </dependency>
                <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-web</artifactId>
                </dependency>
                <!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator -->
                <dependency>
                    <groupId>org.hibernate.validator</groupId>
                    <artifactId>hibernate-validator</artifactId>
                    <version>8.0.0.CR1</version>
                </dependency>
                <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core -->
                <dependency>
                    <groupId>org.apache.logging.log4j</groupId>
                    <artifactId>log4j-core</artifactId>
                    <version>2.18.0</version>
                </dependency>
        </dependencies>


        <build>
                <plugins>
                        <plugin>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-maven-plugin</artifactId>
                        </plugin>
                </plugins>
        </build>


</project>
……………..
http://localhost:8082/api/v1/delitos


………………28-07-2022


package co.edu.iudigital.config;


import java.util.List;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;


import co.edu.iudigital.exception.BadRequestException;
import co.edu.iudigital.exception.ErrorDto;
import co.edu.iudigital.exception.InternalServerErrorException;
import co.edu.iudigital.exception.NotFoundException;


@ControllerAdvice
public class RestExceptionHandler extends ResponseEntityExceptionHandler{
        
        private static final Logger log = LoggerFactory.getLogger(RestExceptionHandler.class);


    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    @ExceptionHandler({Exception.class})
    public ResponseEntity<ErrorDto> getGeneralException(Exception e) {
        log.error(e.getMessage(), e);
        ErrorDto errorRq = ErrorDto.getErrorDto(HttpStatus.INTERNAL_SERVER_ERROR.getReasonPhrase(), e.getMessage(),
                HttpStatus.INTERNAL_SERVER_ERROR.value());
        return new ResponseEntity<>(errorRq, HttpStatus.INTERNAL_SERVER_ERROR);
    }


    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    @ExceptionHandler({InternalServerErrorException.class})
    public ResponseEntity<ErrorDto> getGeneralException(InternalServerErrorException e) {
        log.error(e.getMessage(), e);
        return new ResponseEntity<>(e.getErrorDto(), HttpStatus.INTERNAL_SERVER_ERROR);
    }


    @ResponseStatus(HttpStatus.NOT_FOUND)
    @ExceptionHandler({NotFoundException.class})
    public ResponseEntity<ErrorDto> getNotFoundRquest(NotFoundException e) {
        log.info(e.getMessage());
        return new ResponseEntity<>(e.getErrorDto(), HttpStatus.NOT_FOUND);


    }


    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler({BadRequestException.class})
    public ResponseEntity<ErrorDto> getBadRequestException(BadRequestException e) {
        log.info(e.getErrorDto().getMessage());
        return new ResponseEntity<>(e.getErrorDto(), HttpStatus.BAD_REQUEST);
    }


    @Override
    protected ResponseEntity<Object> handleMethodArgumentNotValid(
            org.springframework.web.bind.MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatus status,
            WebRequest request) {
        BindingResult result = ex.getBindingResult();
        List<FieldError> fieldErrors = result.getFieldErrors();
        StringBuilder errorMessage = new StringBuilder();


        if (fieldErrors != null && !fieldErrors.isEmpty()) {
            errorMessage.append(fieldErrors.get(0).getDefaultMessage());
        } else {
            errorMessage.append("Ocurrio un error al procesar la solicitud. Por favor verifique e intente de nuevo.");
        }


        ErrorDto errorInfo = ErrorDto.getErrorDto(HttpStatus.BAD_REQUEST.getReasonPhrase(), errorMessage.toString(),
                HttpStatus.BAD_REQUEST.value());
        return new ResponseEntity<>(errorInfo, HttpStatus.BAD_REQUEST);
    }   
}






.,...........................
package co.edu.iudigital.exception;


import java.io.Serializable;
import java.time.LocalDateTime;


public class ErrorDto implements Serializable{
        
    private static final long serialVersionUID = 1L;


    private String error;


    private String message;


    private int status;


    private LocalDateTime date;


    /**
     * Obtiene nuevo error
     *
     * @param error String Nombre error HTTP
     * @param message String Mensaje personalizado del error HTTP
     * @param status int Codigo error HTTP
     * @return
     */
    public static ErrorDto getErrorDto(String error, String message, int status) {
        ErrorDto errorDto = new ErrorDto();
        errorDto.setError(error);
        errorDto.setMessage(message);
        errorDto.setStatus(status);
        errorDto.setDate(LocalDateTime.now());
        return errorDto;
    }


    /**
     * @return the error
     */
    public String getError() {
        return error;
    }


    /**
     * @return the message
     */
    public String getMessage() {
        return message;
    }


    /**
     * @return the status
     */
    public int getStatus() {
        return status;
    }


    /**
     * @param error the error to set
     */
    public void setError(String error) {
        this.error = error;
    }


    /**
     * @param message the message to set
     */
    public void setMessage(String message) {
        this.message = message;
    }


    /**
     * @param status the status to set
     */
    public void setStatus(int status) {
        this.status = status;
    }


    /**
     * @return the date
     */
    public LocalDateTime getDate() {
        return date;
    }


    /**
     * @param date the date to set
     */
    public void setDate(LocalDateTime date) {
        this.date = date;
    }
}


………………..
package co.edu.iudigital.exception;


import java.io.Serializable;


public class RestException extends Exception implements Serializable{
        
        private static final long serialVersionUID = 1L;
    
        private ErrorDto errorDto;


    public RestException() {
        super();
    }


    public RestException(ErrorDto errorDto) {
        super(errorDto.getError());
        this.errorDto = errorDto;
    }


    public RestException(String msg) {
        super(msg);
    }


    public RestException(String msg, Exception ex) {
        super(msg, ex);
    }


    /**
     * @return the errorDto
     */
    public ErrorDto getErrorDto() {
        return errorDto;
    }


    /**
     * @param errorDto the errorDto to set
     */
    public void setErrorDto(ErrorDto errorDto) {
        this.errorDto = errorDto;
    }
}


………………..
package co.edu.iudigital.exception;


public class BadRequestException extends RestException{
        
        private static final long serialVersionUID = 1L;


    public BadRequestException() {
        super();
    }


    public BadRequestException(ErrorDto errorDto) {
        super(errorDto);
    }


    public BadRequestException(String msg) {
        super(msg);
    }
}


…………………….
package co.edu.iudigital.exception;


public class InternalServerErrorException extends RestException{
        
            /**
         * 
         */
        private static final long serialVersionUID = 8755814691801188665L;
                private String codigoError;


            public InternalServerErrorException(String msg, String codigoError, Exception ex) {
                super(msg, ex);
                this.codigoError = codigoError;
            }


            public InternalServerErrorException(String msg, Exception ex) {
                super(msg, ex);
            }


            public InternalServerErrorException() {
                super();
            }


            public InternalServerErrorException(ErrorDto errorDto) {
                super(errorDto);
            }


            public String getCodigoError() {
                return codigoError;
            }
}




……………….
package co.edu.iudigital.exception;


public class NotFoundException extends RestException{
        
         private static final long serialVersionUID = 1L;


            public NotFoundException() {
                super();
            }


            public NotFoundException(ErrorDto errorDto) {
                super(errorDto);
            }
}


…………………
package co.edu.iudigital.util;


public interface ConstUtil {
    public static final String MESSAGE_GENERAL = "Se presentó un error al procesar la solicitud, ¡vuelva a intentarlo!";
    public static final String MESSAGE_NOT_FOUND = "No existe prospecto";
    public static final String MESSAGE_ERROR_DATA = "Información no válida";
    public static final String MESSAGE_ALREADY = "Ya existe prospecto";
    public static final String MESSAGE_NOT_AUTHORIZED = "No autorizado";
}
………..
SwaggerConfig


<!-- https://mvnrepository.com/artifact/io.swagger.core.v3/swagger-annotations -->
                <dependency>
                    <groupId>io.swagger.core.v3</groupId>
                    <artifactId>swagger-annotations</artifactId>
                    <version>2.1.10</version>
                </dependency>
                <!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
                <dependency>
                    <groupId>io.springfox</groupId>
                    <artifactId>springfox-swagger-ui</artifactId>
                    <version>3.0.0</version>
                </dependency>
                <!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
                <dependency>
                    <groupId>io.springfox</groupId>
                    <artifactId>springfox-swagger2</artifactId>
                    <version>3.0.0</version>
                </dependency>




_
………………..
package co.edu.iudigital.config;


import java.util.Collections;


import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.service.Contact;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;


@Configuration
@EnableSwagger2
public class SwaggerConfig {
        
        @Bean
    public Docket apiDocket() {
        return new Docket(DocumentationType.SWAGGER_2)
                .select()
                .apis(RequestHandlerSelectors.basePackage("co.edu.iudigital.controller"))
                .paths(PathSelectors.any())
                .build()
                .apiInfo(getApiInfo());
    }


    private ApiInfo getApiInfo() {
        return new ApiInfo(
                "API Helpme IUDigital",
                "API para App Helpme IUDigital",
                "1.0",
                "https://www.iudigital.edu.co/",
                new Contact("Nombre Apellido", "https://www.iudigital.edu.co/", "email@iudigital.edu.co"),
                "LICENSE",
                "LICENSE URL",
                Collections.emptyList()
        );
    }
}


…………..
pom.xml ACTUALIZADO


<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
        <modelVersion>4.0.0</modelVersion>
        <parent>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-parent</artifactId>
                <version>2.5.2</version>
                <relativePath/> <!-- lookup parent from repository -->
        </parent>
        <groupId>co.edu.iudigital</groupId>
        <artifactId>back-end-helpmeiud</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <name>back-end-helpmeiud</name>
        <description>API Rest de HelmeIUD</description>
        <properties>
                <java.version>1.8</java.version>
        </properties>
        <dependencies>
                <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-data-jpa</artifactId>
                </dependency>


                <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-devtools</artifactId>
                        <scope>runtime</scope>
                        <optional>true</optional>
                </dependency>
                <dependency>
                        <groupId>mysql</groupId>
                        <artifactId>mysql-connector-java</artifactId>
                        <scope>runtime</scope>
                </dependency>
                <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-test</artifactId>
                        <scope>test</scope>
                </dependency>
                <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-web</artifactId>
                </dependency>
                <!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator -->
                <dependency>
                    <groupId>org.hibernate.validator</groupId>
                    <artifactId>hibernate-validator</artifactId>
                    <version>8.0.0.CR1</version>
                </dependency>
                <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core -->
                <dependency>
                    <groupId>org.apache.logging.log4j</groupId>
                    <artifactId>log4j-core</artifactId>
                    <version>2.18.0</version>
                </dependency>
                <!-- https://mvnrepository.com/artifact/io.swagger.core.v3/swagger-annotations -->
                <dependency>
                    <groupId>io.swagger.core.v3</groupId>
                    <artifactId>swagger-annotations</artifactId>
                    <version>2.1.10</version>
                </dependency>
                <!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
                <dependency>
                    <groupId>io.springfox</groupId>
                    <artifactId>springfox-swagger-ui</artifactId>
                    <version>3.0.0</version>
                </dependency>
                <!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
                <dependency>
                    <groupId>io.springfox</groupId>
                    <artifactId>springfox-swagger2</artifactId>
                    <version>3.0.0</version>
                </dependency>
                <!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
                <dependency>
                    <groupId>io.springfox</groupId>
                    <artifactId>springfox-swagger-ui</artifactId>
                    <version>3.0.0</version>
                </dependency>
                <!-- Emviar email -->
            <dependency>
                      <groupId>org.springframework.boot</groupId>
                      <artifactId>spring-boot-starter-mail</artifactId>
                </dependency>
        </dependencies>


        <build>
                <plugins>
                        <plugin>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-maven-plugin</artifactId>
                        </plugin>
                </plugins>
        </build>


</project>


………….
package co.edu.iudigital.config;


import java.util.Properties;


import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.JavaMailSenderImpl;


@Configuration
public class EmailConfig {
        
        @Value("${spring.mail.host}")
        private String host;


        @Value("${spring.mail.port}")
        private int port;
        
        @Value("${spring.mail.username}")
        private String username;
        
        @Value("${spring.mail.password}")
        private String password;
        
        @Value("${spring.mail.properties.mail.smtp.auth}")
        private String auth;
        
        @Value("${spring.mail.properties.mail.smtp.starttls.enable}")
        private String startls;
        
        @Bean
        public JavaMailSender sender() {
            JavaMailSenderImpl mailSender = new JavaMailSenderImpl();
            mailSender.setHost(host);
            mailSender.setPort(port);
            
            mailSender.setUsername(username);
            mailSender.setPassword(password);
            
            Properties props = mailSender.getJavaMailProperties();
            props.put("mail.transport.protocol", "smtp");
            props.put("mail.smtp.auth", auth);
            props.put("mail.smtp.starttls.enable", startls);
            props.put("mail.debug", "true");
            
            return mailSender;
        }
}




……………………………………………………………………………………………
Ir a https://myaccount.google.com/lesssecureapps
……………………………………………………………………………………………..


HELP.md
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/


### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache


### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr


### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/


### VS Code ###
.vscode/
# back-end-helpmeiud-v2
/src/main/resources/application.properties
……………….
server.port=8082
server.servlet.context-path=/api/v1
#http://localhost:8082/api/v1
spring.datasource.url=jdbc:mysql://localhost:3306/helpme_iud?serverTimezone=America/Bogota
spring.datasource.username=root
spring.datasource.password=


#jpa: API de persistencia de Java
#orm: Object relational mapping


spring.jpa.hibernate.ddl-auto=none


#spring.batch.jdbc.initialize-schema=always
#spring.sql.init.mode=always
#data.sql para population y schema.sql para crear tablas


#mostrar los script sql
spring.jpa.show-sql=true


# formatea el codigo sql que se muestra en consola
# para mejor lectura
spring.jpa.properties.hibernate.format_sql=true


# properties para logging
logging.level.org.hibernate.SQL=INFO
logging.level.root=INFO


# properties para smtp
spring.mail.host=smtp-relay.gmail.com
spring.mail.port=587
spring.mail.username=correo@gmail.com
spring.mail.password=amorcito123
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true


# properties para archivos
…………………….
package co.edu.iudigital.service.impl;


import java.util.List;
import java.util.Optional;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;


import co.edu.iudigital.dto.CasoDTO;
import co.edu.iudigital.exception.ErrorDto;
import co.edu.iudigital.exception.NotFoundException;
import co.edu.iudigital.exception.RestException;
import co.edu.iudigital.model.Caso;
import co.edu.iudigital.repository.ICasoRepository;
import co.edu.iudigital.service.ICasoService;
import co.edu.iudigital.util.ConstUtil;
import co.edu.iudigital.util.Helper;


@Service
@Transactional
public class CasoServiceImpl implements ICasoService{


        @Autowired
        private ICasoRepository casoRepository;


        @Override
        public List<CasoDTO> findAll() throws RestException {
                List<Caso> casos = casoRepository.findAll();
                return Helper.convertListCasoDTO(casos);
        }


        @Override
        public CasoDTO save(CasoDTO casoDTO) throws RestException {
                Caso caso = Helper.convertCasoDTOToCaso(casoDTO);
                caso = casoRepository.save(caso);
                return Helper.convertCasoToCasoDTO(caso);
        }


        @Override
        public Boolean visible(Boolean visible, Long id) {
                return casoRepository.setVisible(visible, id);
        }


        @Override
        public CasoDTO findById(Long id) throws RestException {
                Optional<Caso> casoOpt = casoRepository.findById(id);
                if(!casoOpt.isPresent()) {
                        throw new NotFoundException(
                                ErrorDto.getErrorDto(
                                                HttpStatus.NOT_FOUND.getReasonPhrase(), 
                                                ConstUtil.MESSAGE_NOT_FOUND, 
                                                HttpStatus.NOT_FOUND.value())
                        );
                }
                return Helper.convertCasoToCasoDTO(casoOpt.get());
        }


}


………………………………………………………..
package co.edu.iudigital.service.impl;


import java.util.List;
import java.util.Optional;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;


import co.edu.iudigital.dto.CasoDTO;
import co.edu.iudigital.exception.ErrorDto;
import co.edu.iudigital.exception.NotFoundException;
import co.edu.iudigital.exception.RestException;
import co.edu.iudigital.model.Caso;
import co.edu.iudigital.repository.ICasoRepository;
import co.edu.iudigital.service.ICasoService;
import co.edu.iudigital.util.ConstUtil;
import co.edu.iudigital.util.Helper;


@Service
@Transactional
public class CasoServiceImpl implements ICasoService{


        @Autowired
        private ICasoRepository casoRepository;


        @Override
        public List<CasoDTO> findAll() throws RestException {
                List<Caso> casos = casoRepository.findAll();
                return Helper.convertListCasoDTO(casos);
        }


        @Override
        public CasoDTO save(CasoDTO casoDTO) throws RestException {
                Caso caso = Helper.convertCasoDTOToCaso(casoDTO);
                caso = casoRepository.save(caso);
                return Helper.convertCasoToCasoDTO(caso);
        }


        @Override
        public Boolean visible(Boolean visible, Long id) {
                return casoRepository.setVisible(visible, id);
        }


        @Override
        public CasoDTO findById(Long id) throws RestException {
                Optional<Caso> casoOpt = casoRepository.findById(id);
                if(!casoOpt.isPresent()) {
                        throw new NotFoundException(
                                ErrorDto.getErrorDto(
                                                HttpStatus.NOT_FOUND.getReasonPhrase(), 
                                                ConstUtil.MESSAGE_NOT_FOUND, 
                                                HttpStatus.NOT_FOUND.value())
                        );
                }
                return Helper.convertCasoToCasoDTO(casoOpt.get());
        }


}


………………………….


package co.edu.iudigital.controller;


import java.util.List;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;


import co.edu.iudigital.dto.CasoDTO;
import co.edu.iudigital.exception.RestException;
import co.edu.iudigital.service.ICasoService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.SwaggerDefinition;
import io.swagger.annotations.Tag;
import io.swagger.v3.oas.annotations.parameters.RequestBody;


@RestController
@RequestMapping("/casos")
@Api(value = "/casos", tags = {"Casos"})
@SwaggerDefinition(tags = {
                @Tag(name = "Casos", description = "Gestion API Casos")
})
public class CasoController {


        private static final Logger log = 
                        LoggerFactory.getLogger(CasoController.class);
        
        @Autowired
        private ICasoService casoService;
        
        @ApiOperation(
                        value = "Obtiene todos los casos",
                        response = List.class, 
                        produces = "application/json",
                        httpMethod = "GET")
        @GetMapping
        public ResponseEntity<List<CasoDTO>> index(){
                try {
                        return ResponseEntity.ok(casoService.findAll());
                } catch (RestException e) {
                        log.error("Error consulta", e);
                        return null;
                }
        }
        
        @ApiOperation(
                        value = "Guarda un caso",
                        response = CasoDTO.class, 
                        produces = "application/json",
                        httpMethod = "POST")
        @PostMapping
        public ResponseEntity<CasoDTO> create(
                                @RequestBody CasoDTO casoDTO
                        ) {
                try {
                        return new ResponseEntity(
                                        casoService.save(casoDTO),
                                        HttpStatus.CREATED
                        );
                } catch (RestException e) {
                        log.error("Error al guardar", e);
                        return null;
                }
        }
}


………………………………………..